package fr.curie.micmaq.gui;

import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class ChannelPanel extends JPanel {
    private JPanel rootPane;
    private JTextField proteinNameTF;
    private JRadioButton nucleiRadioButton;
    private JRadioButton entireCellRadioButton;
    private JRadioButton quantificationRadioButton;
    private JCheckBox spotsMeasureCheckBox;
    private JCheckBox channelCheckBox;

    private Component parent;

    private int id;

    public ChannelPanel(int id, Component parent) {
        $$$setupUI$$$();
        this.id = id;
        this.parent = parent;
        channelCheckBox.setText("channel " + (id + 1));

        quantificationRadioButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                spotsMeasureCheckBox.setEnabled(quantificationRadioButton.isSelected());
                int offset = ((e.getModifiers() & ActionEvent.CTRL_MASK) == ActionEvent.CTRL_MASK) ? 10 : 0;
                parent.firePropertyChange("channel", 1, 2 + offset);
            }
        });
        spotsMeasureCheckBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int offset = ((e.getModifiers() & ActionEvent.CTRL_MASK) == ActionEvent.CTRL_MASK) ? 10 : 0;
                parent.firePropertyChange("channel", 1, 2 + offset);
            }
        });
        nucleiRadioButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                spotsMeasureCheckBox.setEnabled(quantificationRadioButton.isSelected());
                int offset = ((e.getModifiers() & ActionEvent.CTRL_MASK) == ActionEvent.CTRL_MASK) ? 10 : 0;
                parent.firePropertyChange("channel", 1, 2 + offset);
            }
        });
        entireCellRadioButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                spotsMeasureCheckBox.setEnabled(quantificationRadioButton.isSelected());
                int offset = ((e.getModifiers() & ActionEvent.CTRL_MASK) == ActionEvent.CTRL_MASK) ? 10 : 0;
                parent.firePropertyChange("channel", 1, 2 + offset);
            }
        });

        channelCheckBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                nucleiRadioButton.setEnabled(channelCheckBox.isSelected());
                entireCellRadioButton.setEnabled(channelCheckBox.isSelected());
                quantificationRadioButton.setEnabled(channelCheckBox.isSelected());
                spotsMeasureCheckBox.setEnabled(channelCheckBox.isSelected() && quantificationRadioButton.isSelected());

                int offset = ((e.getModifiers() & ActionEvent.CTRL_MASK) == ActionEvent.CTRL_MASK) ? 10 : 0;
                parent.firePropertyChange("channel", 1, 2 + offset);
            }
        });
    }

    public boolean isUsed() {
        return channelCheckBox.isSelected();
    }

    public boolean isNuclei() {
        return isUsed() && nucleiRadioButton.isSelected();
    }

    public boolean isCell() {
        return isUsed() && entireCellRadioButton.isSelected();
    }

    public boolean isQuantification() {
        return isUsed() && (quantificationRadioButton.isSelected() || (!isCell() && !isNuclei()));
    }

    public boolean isSpot() {
        return isQuantification() && spotsMeasureCheckBox.isSelected();
    }

    public String getProteinName() {
        return proteinNameTF.getText();
    }

    public void setProteinName(String name) {
        proteinNameTF.setText(name);
    }


    public int getID() {
        return id;
    }

    public JPanel getPanel() {
        return rootPane;
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPane = new JPanel();
        rootPane.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 7, new Insets(0, 0, 0, 0), -1, -1));
        final JLabel label1 = new JLabel();
        label1.setText("label name");
        rootPane.add(label1, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        proteinNameTF = new JTextField();
        rootPane.add(proteinNameTF, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(50, -1), null, 0, false));
        nucleiRadioButton = new JRadioButton();
        nucleiRadioButton.setText("nuclei");
        rootPane.add(nucleiRadioButton, new com.intellij.uiDesigner.core.GridConstraints(0, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        entireCellRadioButton = new JRadioButton();
        entireCellRadioButton.setText("cells");
        rootPane.add(entireCellRadioButton, new com.intellij.uiDesigner.core.GridConstraints(0, 4, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        quantificationRadioButton = new JRadioButton();
        quantificationRadioButton.setSelected(true);
        quantificationRadioButton.setText("quantification");
        rootPane.add(quantificationRadioButton, new com.intellij.uiDesigner.core.GridConstraints(0, 5, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        spotsMeasureCheckBox = new JCheckBox();
        spotsMeasureCheckBox.setEnabled(true);
        spotsMeasureCheckBox.setText("spots measure");
        rootPane.add(spotsMeasureCheckBox, new com.intellij.uiDesigner.core.GridConstraints(0, 6, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        channelCheckBox = new JCheckBox();
        channelCheckBox.setSelected(true);
        channelCheckBox.setText("channel");
        rootPane.add(channelCheckBox, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ButtonGroup buttonGroup;
        buttonGroup = new ButtonGroup();
        buttonGroup.add(nucleiRadioButton);
        buttonGroup.add(entireCellRadioButton);
        buttonGroup.add(quantificationRadioButton);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPane;
    }

}
